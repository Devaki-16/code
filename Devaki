package com.example.jsonreader.model;

import lombok.Data;
import java.util.Map;

@Data
public class EntityData {
    private Map<String, Object> identifiers;
    private Map<String, Object> businessGroup;
}



package com.example.jsonreader.model;

import lombok.Data;
import java.util.List;

@Data
public class EntityResponse {
    private String date;
    private String version;
    private String type;
    private int totalResults;
    private List<Wrapper> results;
}



package com.example.jsonreader.model;

import lombok.Data;

@Data
public class Wrapper {
    private EntityData entity;
}



package com.example.jsonreader;

import com.example.jsonreader.model.EntityData;
import com.example.jsonreader.service.JsonReaderService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class JsonReaderApplication implements CommandLineRunner {

    private final JsonReaderService jsonReaderService;

    public JsonReaderApplication(JsonReaderService jsonReaderService) {
        this.jsonReaderService = jsonReaderService;
    }

    public static void main(String[] args) {
        SpringApplication.run(JsonReaderApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("\n===== Starting Entity Data Processing =====");
        jsonReaderService.readAndDisplayEntities();
        System.out.println("===== Processing Complete =====");
    }
}



package com.example.jsonreader.service;

import com.example.jsonreader.model.EntityData;
import com.example.jsonreader.model.EntityResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();

            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            List<EntityData> entities = response.getResults()
                    .stream()
                    .map(wrapper -> wrapper.getEntity())
                    .toList();

            displayEntities(entities);

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<EntityData> entities) {
        System.out.printf("\nFound %d entities:\n", entities.size());
        System.out.println("----------------------------------------");

        entities.forEach(entity -> {
            System.out.println("Identifiers:");
            entity.getIdentifiers().forEach((key, value) ->
                    System.out.printf("  %s: %s\n", key, value));

            System.out.println("\nBusiness Group:");
            entity.getBusinessGroup().forEach((key, value) ->
                    System.out.printf("  %s: %s\n", key, value));

            System.out.println("----------------------------------------");
        });
    }
}





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>jsonreader</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Spring Boot Core (without web) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Jackson for JSON processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Optional: For better logging in console -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.example.jsonreader.JsonReaderApplication</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>



package com.example.jsonreader.service;

import com.example.jsonreader.model.EntityData;
import com.example.jsonreader.model.EntityResponse;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            
            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.printf("\nFound %d entities:\n", wrappers.size());
        System.out.println("----------------------------------------");

        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();
            System.out.println("Entity Details:");
            
            // Safe handling for identifiers
            if (entity.getIdentifiers() != null && !entity.getIdentifiers().isEmpty()) {
                System.out.println("Identifiers:");
                entity.getIdentifiers().forEach((key, value) -> 
                    System.out.printf("  %s: %s\n", key, value));
            } else {
                System.out.println("Identifiers: No data available");
            }
            
            // Safe handling for businessGroup
            if (entity.getBusinessGroup() != null && !entity.getBusinessGroup().isEmpty()) {
                System.out.println("\nBusiness Group:");
                entity.getBusinessGroup().forEach((key, value) -> 
                    System.out.printf("  %s: %s\n", key, value));
            } else {
                System.out.println("\nBusiness Group: No data available");
            }
            
            System.out.println("----------------------------------------");
        });
    }
}




package com.example.jsonreader.service;

import com.example.jsonreader.model.EntityData;
import com.example.jsonreader.model.EntityResponse;
import com.example.jsonreader.model.Wrapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            
            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.println("\n===== ENTITY DATA =====");
        System.out.printf("Total entities: %d%n%n", wrappers.size());
        
        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();
            
            // Handle identifiers
            System.out.println("--- Identifiers ---");
            if (entity.getIdentifiers() != null && !entity.getIdentifiers().isEmpty()) {
                entity.getIdentifiers().forEach((key, value) -> 
                    System.out.printf("%-15s: %s%n", key, value));
            } else {
                System.out.println("No identifier data");
            }
            
            // Handle business group
            System.out.println("\n--- Business Group ---");
            if (entity.getBusinessGroup() != null && !entity.getBusinessGroup().isEmpty()) {
                entity.getBusinessGroup().forEach((key, value) -> 
                    System.out.printf("%-15s: %s%n", key, value));
            } else {
                System.out.println("No business group data");
            }
            
            System.out.println("\n=====================\n");
        });
    }
}





package com.example.jsonreader.model;

import lombok.Data;
import java.util.List;

@Data
public class BusinessGroup {
    private String businessGroupCode;
    private String name;
    private String businessCountry;
    private String responsibleEntityCode;
    private String responsibleEntityName;
    private String coverage;
    private String lastRatingDate;
    private List<RiskIndustry> riskIndustry;

    @Data
    public static class RiskIndustry {
        private String industryCode;
        private Integer industryPercentage;
    }
}



package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.println("\n===== ENTITY DATA =====");
        System.out.printf("Total entities: %d%n%n", wrappers.size());

        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();
            
            // Display identifiers
            System.out.println("--- Identifiers ---");
            if (entity.getIdentifiers() != null) {
                System.out.printf("ptyId: %d%n", entity.getIdentifiers().getPtyId());
                System.out.printf("crdsCode: %s%n", entity.getIdentifiers().getCrdsCode());
                System.out.printf("kycId: %d%n", entity.getIdentifiers().getKycId());
            } else {
                System.out.println("No identifier data");
            }

            // Display business group
            System.out.println("\n--- Business Group ---");
            if (entity.getBusinessGroup() != null) {
                BusinessGroup bg = entity.getBusinessGroup();
                System.out.printf("Code: %s%n", bg.getBusinessGroupCode());
                System.out.printf("Name: %s%n", bg.getName());
                System.out.printf("Country: %s%n", bg.getBusinessCountry());
                System.out.printf("Responsible Entity: %s (%s)%n", 
                    bg.getResponsibleEntityName(), bg.getResponsibleEntityCode());
                System.out.printf("Coverage: %s%n", bg.getCoverage());
                System.out.printf("Last Rating: %s%n", bg.getLastRatingDate());
                
                if (bg.getRiskIndustry() != null && !bg.getRiskIndustry().isEmpty()) {
                    System.out.println("Risk Industries:");
                    bg.getRiskIndustry().forEach(ri -> 
                        System.out.printf("  %s: %d%%%n", 
                            ri.getIndustryCode(), ri.getIndustryPercentage()));
                }
            } else {
                System.out.println("No business group data");
            }

            System.out.println("\n=====================");
        });
    }
}










package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.println("\n===== ENTITY DATA =====");
        System.out.printf("Total entities: %d%n%n", wrappers.size());

        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();
            
            // Display identifiers
            System.out.println("--- Identifiers ---");
            if (entity.getIdentifiers() != null) {
                // Safe extraction with type conversion
                System.out.printf("ptyId: %s%n", getSafeString(entity.getIdentifiers(), "ptyId"));
                System.out.printf("crdsCode: %s%n", getSafeString(entity.getIdentifiers(), "crdsCode"));
                System.out.printf("kycId: %s%n", getSafeString(entity.getIdentifiers(), "kycId"));
            } else {
                System.out.println("No identifier data");
            }

            // Display business group
            System.out.println("\n--- Business Group ---");
            if (entity.getBusinessGroup() != null) {
                Map<String, Object> bg = entity.getBusinessGroup();
                System.out.printf("Code: %s%n", getSafeString(bg, "businessGroupCode"));
                System.out.printf("Name: %s%n", getSafeString(bg, "name"));
                System.out.printf("Country: %s%n", getSafeString(bg, "businessCountry"));
                System.out.printf("Responsible Entity: %s (%s)%n", 
                    getSafeString(bg, "responsibleEntityName"),
                    getSafeString(bg, "responsibleEntityCode"));
                System.out.printf("Coverage: %s%n", getSafeString(bg, "coverage"));
                System.out.printf("Last Rating: %s%n", getSafeString(bg, "lastRatingDate"));
                
                // Handle riskIndustry if present
                if (bg.containsKey("riskIndustry")) {
                    System.out.println("Risk Industries: [Data available]");
                }
            } else {
                System.out.println("No business group data");
            }

            System.out.println("\n=====================");
        });
    }

    private String getSafeString(Map<String, Object> map, String key) {
        return map.containsKey(key) ? String.valueOf(map.get(key)) : "N/A";
    }
}






package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            
            // Explicitly declare the Map types for deserialization
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.println("\n===== ENTITY DATA =====");
        System.out.printf("Total entities: %d%n%n", wrappers.size());

        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();
            
            // Display identifiers with proper type casting
            System.out.println("--- Identifiers ---");
            displayMapContents(entity.getIdentifiers());

            // Display business group with proper type casting
            System.out.println("\n--- Business Group ---");
            displayMapContents(entity.getBusinessGroup());

            System.out.println("\n=====================");
        });
    }

    private void displayMapContents(Map<String, Object> map) {
        if (map == null || map.isEmpty()) {
            System.out.println("No data available");
            return;
        }

        map.forEach((key, value) -> {
            if (value instanceof Map) {
                System.out.println(key + ":");
                displayMapContents((Map<String, Object>) value);
            } else if (value instanceof List) {
                System.out.println(key + ":");
                ((List<?>) value).forEach(item -> {
                    if (item instanceof Map) {
                        displayMapContents((Map<String, Object>) item);
                    } else {
                        System.out.println("  " + item);
                    }
                });
            } else {
                System.out.printf("%-20s: %s%n", key, value);
            }
        });
    }
}








package com.example.jsonreader.service;

import com.example.jsonreader.model.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);
            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.println("\n===== ENTITY DATA =====");
        System.out.printf("Total entities: %d%n%n", wrappers.size());

        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();
            
            // Display identifiers
            System.out.println("--- Identifiers ---");
            if (entity.getIdentifiers() != null) {
                IdentifierData id = entity.getIdentifiers();
                System.out.printf("ptyId: %d%n", id.getPartyId());
                System.out.printf("crdsCode: %s%n", id.getCrdsCode());
                System.out.printf("kycId: %d%n", id.getKycId());
            } else {
                System.out.println("No identifier data");
            }

            // Display business group
            System.out.println("\n--- Business Group ---");
            if (entity.getBusinessGroup() != null) {
                BusinessGroupData bg = entity.getBusinessGroup();
                System.out.printf("Code: %s%n", bg.getCode());
                System.out.printf("Name: %s%n", bg.getName());
                System.out.printf("Country: %s%n", bg.getCountry());
                System.out.printf("Responsible Entity: %s (%s)%n", 
                    bg.getResponsibleName(), bg.getResponsibleCode());
                System.out.printf("Coverage: %s%n", bg.getCoverage());
                System.out.printf("Last Rating: %s%n", bg.getLastRatingDate());
                
                if (bg.getRiskIndustries() != null) {
                    System.out.println("Risk Industries:");
                    bg.getRiskIndustries().forEach(ri -> 
                        System.out.printf("  %s: %d%%%n", ri.getCode(), ri.getPercentage()));
                }
            } else {
                System.out.println("No business group data");
            }

            System.out.println("\n=====================");
        });
    }
}




















package com.example.jsonreader.service;

import com.example.jsonreader.model.EntityResponse;
import com.example.jsonreader.model.EntityData;
import com.example.jsonreader.model.Wrapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);

            List<Wrapper> wrappers = response.getResults();

            System.out.printf("Total entities: %d%n%n", wrappers.size());

            wrappers.stream()
                    .map(Wrapper::getEntity)
                    .filter(Objects::nonNull)
                    .forEach(this::printEntityFields);

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void printEntityFields(EntityData entity) {
        System.out.println("===== ENTITY =====");

        Optional.ofNullable(entity.getIdentifiers())
                .ifPresentOrElse(
                        ids -> {
                            System.out.println("--- Identifiers ---");
                            ids.forEach((k, v) -> System.out.printf("%-20s: %s%n", k, v));
                        },
                        () -> System.out.println("No Identifiers")
                );

        Optional.ofNullable(entity.getBusinessGroup())
                .ifPresentOrElse(
                        bg -> {
                            System.out.println("--- Business Group ---");
                            bg.forEach((k, v) -> System.out.printf("%-20s: %s%n", k, v));
                        },
                        () -> System.out.println("No Business Group")
                );

        System.out.println();
    }
}









private void displayEntities(List<Wrapper> wrappers) {
    System.out.println("\n===== ENTITY DATA =====");
    System.out.printf("Total entities: %d%n%n", wrappers.size());

    wrappers.forEach(wrapper -> {
        EntityData entity = wrapper.getEntity();

        // Handle identifiers
        System.out.println("--- Identifiers ---");
        if (entity != null && entity.getIdentifiers() != null && !entity.getIdentifiers().isEmpty()) {
            entity.getIdentifiers().forEach((key, value) ->
                System.out.printf("%-15s: %s%n", key, value));
        } else {
            System.out.println("No identifier data");
        }

        // Handle businessGroup from wrapper (outside entity)
        System.out.println("\n--- Business Group ---");
        if (wrapper.getBusinessGroup() != null) {
            System.out.println(wrapper.getBusinessGroup()); // Or cast/map if needed
        } else {
            System.out.println("No business group data");
        }

        System.out.println("\n=====================\n");
    });
}









package com.example.jsonreader.service;

import com.example.jsonreader.model.EntityData;
import com.example.jsonreader.model.EntityResponse;
import com.example.jsonreader.model.Wrapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

@Service
public class JsonReaderService {

    public void readAndDisplayEntities() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

            InputStream inputStream = new ClassPathResource("data/entities.json").getInputStream();
            EntityResponse response = mapper.readValue(inputStream, EntityResponse.class);

            displayEntities(response.getResults());

        } catch (Exception e) {
            System.err.println("Error processing JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayEntities(List<Wrapper> wrappers) {
        System.out.println("\n===== ENTITY DATA =====");
        System.out.printf("Total entities: %d%n%n", wrappers.size());

        wrappers.forEach(wrapper -> {
            EntityData entity = wrapper.getEntity();

            // Handle identifiers
            System.out.println("--- Identifiers ---");
            if (entity != null && entity.getIdentifiers() != null && !entity.getIdentifiers().isEmpty()) {
                entity.getIdentifiers().forEach((key, value) ->
                        System.out.printf("%-15s: %s%n", key, value));
            } else {
                System.out.println("No identifier data");
            }

            // Handle business group (outside entity)
            System.out.println("\n--- Business Group ---");
            Map<String, Object> businessGroup = wrapper.getBusinessGroup();
            if (businessGroup != null && !businessGroup.isEmpty()) {
                businessGroup.forEach((key, value) ->
                        System.out.printf("%-20s: %s%n", key, value));
            } else {
                System.out.println("No business group data");
            }

            System.out.println("\n=====================\n");
        });
    }
}








package com.example.jsonreader;

import com.example.jsonreader.service.JsonReaderService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class JsonReaderApplication implements CommandLineRunner {

    private final JsonReaderService jsonReaderService;

    public JsonReaderApplication(JsonReaderService jsonReaderService) {
        this.jsonReaderService = jsonReaderService;
    }

    public static void main(String[] args) {
        SpringApplication.run(JsonReaderApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("\n===== Starting Entity Data Processing =====");
        jsonReaderService.readAndDisplayEntities();  // Fixed: removed invalid "="
        System.out.println("===== Processing Complete =====");
    }
}


private void displayEntities(List<Wrapper> wrappers) {
    System.out.println("\n===== ENTITY DATA =====");
    System.out.printf("Total entities: %d%n%n", wrappers.size());

    int index = 1;
    for (Wrapper wrapper : wrappers) {
        EntityData entity = wrapper.getEntity();
        Map<String, Object> identifiers = entity != null ? entity.getIdentifiers() : null;
        Map<String, Object> businessGroup = wrapper.getBusinessGroup();

        System.out.printf("Entity %d:%n", index++);

        // Format identifiers
        if (identifiers != null && !identifiers.isEmpty()) {
            String identifierStr = identifiers.entrySet().stream()
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining(", "));
            System.out.println("Identifiers: [" + identifierStr + "]");
        } else {
            System.out.println("Identifiers: [No data]");
        }

        // Format businessGroup
        if (businessGroup != null && !businessGroup.isEmpty()) {
            String bgStr = businessGroup.entrySet().stream()
                    .map(entry -> entry.getKey() + "=" + entry.getValue())
                    .collect(Collectors.joining(", "));
            System.out.println("BusinessGroup: [" + bgStr + "]");
        } else {
            System.out.println("BusinessGroup: [No data]");
        }

        System.out.println(); // Extra line for spacing
    }
}









private void displayEntities(List<Wrapper> wrappers) {
    System.out.println("\n===== ENTITY DATA =====");
    System.out.printf("Total entities: %d%n%n", wrappers.size());

    int index = 1;
    for (Wrapper wrapper : wrappers) {
        EntityData entity = wrapper.getEntity();
        BusinessGroup businessGroup = wrapper.getBusinessGroup();

        System.out.printf("Entity %d:%n", index++);

        // Print identifiers
        if (entity != null && entity.getIdentifiers() != null) {
            String identifierStr = entity.getIdentifiers().entrySet().stream()
                    .map(e -> e.getKey() + "=" + e.getValue())
                    .collect(Collectors.joining(", "));
            System.out.println("Identifiers: [" + identifierStr + "]");
        } else {
            System.out.println("Identifiers: [No data]");
        }

        // Print business group
        if (businessGroup != null) {
            System.out.print("BusinessGroup: [");
            System.out.printf(
                    "businessGroupCode=%s, name=%s, businessCountry=%s, responsibleEntityCode=%s, responsibleEntityName=%s, coverage=%s, lastRatingDate=%s",
                    businessGroup.getBusinessGroupCode(),
                    businessGroup.getName(),
                    businessGroup.getBusinessCountry(),
                    businessGroup.getResponsibleEntityCode(),
                    businessGroup.getResponsibleEntityName(),
                    businessGroup.getCoverage(),
                    businessGroup.getLastRatingDate()
            );

            // Print risk industry if present
            if (businessGroup.getRiskIndustry() != null && !businessGroup.getRiskIndustry().isEmpty()) {
                System.out.print(", riskIndustry=[");
                businessGroup.getRiskIndustry().forEach(risk -> System.out.printf(
                        "{industryCode=%s, industryPercentage=%d} ",
                        risk.getIndustryCode(), risk.getIndustryPercentage()));
                System.out.print("]");
            }

            System.out.println("]");
        } else {
            System.out.println("BusinessGroup: [No data]");
        }

        System.out.println();
    }
}
